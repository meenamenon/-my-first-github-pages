<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">	
    <title>Clock</title>
    <link rel="stylesheet" href="clock.css">
    <script src="library_event.js"></script>
    <script src="clock.js"></script>
</head>
<body>
    <main>
  <h1>Digital clock with stopwatch</h1>
    <fieldset>
   <legend>Clock</legend>
    <span id="hours">&nbsp;</span>:
    <span id="minutes">&nbsp;</span>:
    <span id="seconds">&nbsp;</span>&nbsp;
    <span id="ampm">&nbsp;</span>
     </fieldset>
        
  <fieldset>
 <legend>Stop Watch</legend>
  <a href="#" id="start">Start</a>&nbsp;
  <a href="#" id="stop">Stop</a>&nbsp;
  <a href="#" id="reset">Reset</a>&nbsp;
  
   <span id="s_minutes">00</span>:
    <span id="s_seconds">00</span>:
     <span id="s_ms">000</span>
        </fieldset>
    </main>
</body>
</html>


CLOCK.JavaScript

"use strict";
var $ = function(id) { return document.getElementById(id); };
var evt = {
 attach: function(node, eventName, func) {

    },
    detach: function(node, eventName, func) {

    },
    preventDefault: function(e) {

    }
};

//global stop watch timer variable and elapsed time object
var stopwatchTimer;
var elapsedMinutes = 0;
var elapsedSeconds = 0;
var elapsedMilliseconds = 0;

var displayCurrentTime = function() {
    var now = new Date();
    var hours = now.getHours();
    var ampm = "AM"; // set default value
    
    // correct hours and AM/PM value for display
    if (hours > 12) { // convert from military time
        hours = hours - 12;
        ampm = "PM";
    } else { // adjust 12 noon and 12 midnight
         switch (hours) {
            case 12: // noon
                ampm = "PM";
                break;
            case 0:  // midnight
                hours = 12;
                ampm = "AM";
        }
    }
    
    $("hours").firstChild.nodeValue = hours;
    $("minutes").firstChild.nodeValue = padSingleDigit(now.getMinutes());
    $("seconds").firstChild.nodeValue = padSingleDigit(now.getSeconds());
    $("ampm").firstChild.nodeValue = ampm;
};

var padSingleDigit = function(num) {
	if (num < 10) {	return "0" + num; }
	else { return num; }
};
var tickStopwatch = function() {
    // increment milliseconds by 10 milliseconds
    elapsedMilliseconds += 10;
    // if milliseconds total 1000, increment seconds by one and reset milliseconds to zero
    if (elapsedMilliseconds >= 1000) {
        elapsedSeconds += 1;
        elapsedMilliseconds = 0;
    }
    // if seconds total 60, increment minutes by one and reset seconds to zero
    if (elapsedSeconds >= 60) {
        elapsedMinutes += 1;
        elapsedSeconds = 0;
    }
    //display new stopwatch time
    $("s_ms").innerHTML = elapsedMilliseconds;
    $("s_seconds").innerHTML = elapsedSeconds;
    $("s_minutes").innerHTML = elapsedMinutes;
};

var startStopwatch = function(evt) {
    // prevent default action of link
    if (!evt) { evt = window.event; }
    if (evt.preventDefault) { evt.preventDefault(); }
    else { evt.returnFalse = false; }
    // do first tick of stop watch and then set interval timer to tick
    setInterval(tickStopwatch, 10);
    stopwatchTimer = setInterval(tickStopwatch, 10);
    // ??? stop watch every 10 milliseconds. Store timer object in stopwatchTimer 
    // ??? variable so next two functions can stop timer.
};

var stopStopwatch = function(evt) {
    if (!evt) { evt = window.event; }
    if (evt.preventDefault) { evt.preventDefault(); }
    else { evt.returnFalse = false; }
    // prevent default action of link
    clearInterval(stopwatchTimer);
    // stop timer
};

var resetStopwatch = function(evt) {
    // prevent default action of link
    if (!evt) { evt = window.event; }
    if (evt.preventDefault) { evt.preventDefault(); }
    else { evt.returnFalse = false; }
    // stop timer
	
    clearInterval(stopwatchTimer);
    // reset elapsed variables and clear stopwatch display
    $("s_ms").innerHTML = "000";
    $("s_seconds").innerHTML = "00";
    $("s_minutes").innerHTML = "00";
    elapsedMilliseconds = 0;
    elapsedMinutes = 0;
    elapsedSeconds = 0;

    
};

window.onload = function() {
    // set initial clock display and then set interval timer to display 
	//new time every second.
    displayCurrentTime();
    setInterval(displayCurrentTime, 1000);
    // set up stopwatch event handlers
  $("start").onclick = startStopwatch(evt);
  $("stop").onclick = stopStopwatch(evt);
 $("reset").onclick = resetStopwatch(evt);
};



USE THIS IN AN ANOTHER JS FILE (library_event.js)


"use strict";
var evt = {
attach: function(node, eventName, func) {

},
detach: function(node, eventName, func) {

},
preventDefault: function(e) {

}
};



CLOCK.CSS


body {
    font-family: Arial, Helvetica, sans-serif;
    background-color: white;
    margin: 0 auto;
    width: 450px;
    border: 3px solid blue;
    padding: 0 2em 1em;
}
h1 {
    color: blue;
}
label {
    float: left;
    width: 11em;
    text-align: right;
    padding-bottom: .5em;
}
input {
    margin-left: 1em;
    margin-bottom: .5em;
}
fieldset {
    margin-bottom: 1em;
}







